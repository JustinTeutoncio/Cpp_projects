//Justin Teutonico
//CSC 382 Project 1 - Fibo Recursive vs. Non-recursive
//8-31-16
#include<iostream>
#include<time.h>
using namespace std;

int fibo_recursive(int n){
	if (n == 0 || n == 1)
		return n;
	return (fibo_recursive(n - 1) + fibo_recursive(n - 2));
}

int fibo_loop(int n){
	int fibo[1000];
	fibo[0] = 0; fibo[1] = 1;
	for (int i = 2; i <= n; i++)
		fibo[i] = fibo[i - 1] + fibo[i - 2];
	return (fibo[n]);
}

void realmain(){ 
	clock_t t; clock_t t2; //establish clock variables
	cout << "Welcome to the program. Please allow time to process everything." << endl;
	int n_array[9]; //up to 9 n values
	n_array[0] = 5; //starts at 5
	for (int i = 0; i < 9; i++)
		n_array[i + 1] = n_array[i] + 5;
	float recur_times[9]; //array for storing times for recursive solution
	float non_recur_times[9];//" " for non-recur
	int ans[9];//the final answers
	cout << "n \t \t   fiboRecursive \t fiboLoop  \t     ans" << endl;//spacing should look nice (it lines up on my computer)
	for (int i = 0; i<9; i++){//loops 9 times
		
		t = clock();//initial time
		ans[i] = fibo_recursive(n_array[i]);//program is run
		t2 = clock();//concluding time
		recur_times[i] = t2 - t; //time elapsed
		
		t = clock();//same process for non-recursive
		fibo_loop(n_array[i]);
		t2 = clock();
		non_recur_times[i] = t2 - t;
		cout << n_array[i] << " \t    \t   " << (double)recur_times[i] / CLOCKS_PER_SEC << " seconds    \t " << (double)non_recur_times[i] / CLOCKS_PER_SEC << "seconds     \t     " << ans[i] << endl;
	}
	cout << "Try again? Y / N" << endl;
	char answer; cin >> answer;
	if (answer == 'y' || answer == 'Y')
		realmain();//loops when y is entered, closes self otherwise
}

int main(){
	realmain();//this function can loop itself
	return 0;
}
